displayColorMqtt(r1,g1,b1) matches {
    event: 'mqtt',
    msg: {
        output_fields: {
            'evt.buffer': {
                cmd: 'publish',
                topic: 'displayColor',
                payload: {
                    red: r1,
                    green: g1,
                    blue: b1
                }
            }
        }
    }
} with (r1 >= 0) && (r1 <= 255) && (g1 >= 0) && (g1 <= 255) && (b1 >= 0) && (b1 <= 255);

displayColorDisplay(r2,g2,b2) matches {
    event: 'display',
    msg: {
        output_fields: {
            'evt.buffer': {
                red: r2,
                green: g2,
                blue: b2
            },
            'evt.type': 'pwrite'
        }
    }
} with (r2 >= 0) && (r2 <= 255) && (g2 >= 0) && (g2 <= 255) && (b2 >= 0) && (b2 <= 255);

errorEvent matches {
    event: 'error'
};

check_rgb(r1, g1, b1, r2, g2, b2) matches displayColorDisplay(r2, g2, b2) with r1==r2 && b1==b2 && g1==g2;

Main = {let r1, g1, b1; displayColorMqtt(r1, g1, b1) CheckRgbNext<r1, g1, b1> \/ errorEvent CheckRgbNext<0, 0, 0> \/ notDisplayColorMqtt CheckRgbNext<0, 0, 0>}*;
CheckRgbNext<r1, g1, b1> = {let r2, g2, b2; check_rgb(r1, g1, b1, r2, g2, b2)};